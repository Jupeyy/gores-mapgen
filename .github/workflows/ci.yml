name: Publish release

on:
  push:
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create release
      id: create_release
      uses: "softprops/action-gh-release@v1"
      with:
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v3
    - name: Install deps
      run: sudo apt install pkg-config libx11-dev libxi-dev libgl1-mesa-dev libasound2-dev

    - name: Run tests
      run: cargo test --verbose

    - name: Run build
      run: cargo build --release && strip --strip-all ./target/release/gores-generator && mv ./target/release/gores-generator ./target/release/gores-generator-linux

    - name: Upload release
      id: upload-release-linux
      uses: alexellis/upload-assets@0.2.3
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_paths: '["./target/release/gores-generator-linux"]'


  build-macos:
    runs-on: macos-latest
    needs: release

    steps:
    - uses: actions/checkout@v3
    - name: Install deps
      run: brew install cmake ffmpeg freetype glew glslang googletest libpng molten-vk opusfile rust SDL2 spirv-tools vulkan-headers wavpack x264

    - name: Run tests
      run: cargo test --verbose

    - name: Run build
      run: cargo build --release && mv ./target/release/gores-generator ./target/release/gores-generator-macos

    - name: Upload release
      id: upload-release-linux
      uses: alexellis/upload-assets@0.2.3
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_paths: '["./target/release/gores-generator-macos"]'


  build-windows:
    runs-on: windows-2019
    needs: release

    steps:
    - uses: actions/checkout@v3

    - name: Run tests
      run: cargo test --verbose

    - name: Run build
      run: cargo build --release

    - name: Upload release
      id: upload-release-windows
      uses: alexellis/upload-assets@0.2.3
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_paths: '["./target/release/gores-generator.exe"]'

  build-other:
    runs-on: ubuntu-20.04
    needs: release
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04
          - arch: armv7
            distro: ubuntu20.04

    steps:
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ secrets.GITHUB_TOKEN }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: gores-generator-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
              apt-get update -q -y
              apt-get install -q -y git curl
              curl https://sh.rustup.rs -sSf | sh -s -- -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            . $HOME/.cargo/env
            cargo build --release
            cp target/release/gores-generator "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Upload release
        id: upload-release-other
        uses: alexellis/upload-assets@0.2.3
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_paths: '["./artifacts/*"]'
